import numpy as np
import pandas as pd
from nilearn import datasets
from nilearn.image import new_img_like, load_img, get_data
from nilearn.image import resample_to_img
from sklearn.model_selection import KFold
from nilearn.image import index_img
import nilearn.decoding
from nilearn.input_data import NiftiMasker
import nilearn as nil
import nibabel as nib
from sklearn.model_selection import StratifiedKFold
from sklearn.svm import LinearSVC
from sklearn import metrics
from nilearn.masking import intersect_masks
import time

class Searchlight_tfMRI:
    def _init_(self, ND_HC_path, HC_path, pheno_path, modal_path):
        self.ND_HC_path = ND_HC_path
        self.HC_path = HC_path
        self.pheno_path = pheno_path
        self.modal_path = modal_path
        
    def prerocess(self):
        filename = pd.read_csv(self.ND_HC_path, dtype = str)
        shape = np.repeat('shapes', 21)
        face = np.repeat('faces', 21)
        label = np.repeat('rest', 332)
        designS = [0, 71, 100, 171, 200]
        designF = [21, 50, 121, 150, 221]
        for i in designS:
            label[i:i+21] = shape
        for j in designF:
            label[j:j+21] = face
        labels = pd.DataFrame(label, columns = ['labels'])
        y = labels['labels']#Restrict to shapes and face
        condition_mask = y.isin(['shap', 'face'])
        y = y[condition_mask]
        label1 = np.repeat('rest', 366)
        
        for i in designS:
            label1[i:i+21] = shape
        for j in designF:
            label1[j:j+21] = face
        labels1 = pd.DataFrame(label1, columns = ['labels'])
        y1 = labels1['labels']
        #Restrict to shapes and face
        condition_mask1 = y1.isin(['shap', 'face'])
        y1 = y1[condition_mask1]
        return condition_mask, condition_mask1, y, y1
    
    def using_multiindex(score_matrix, cols):
        shape = score_matrix.shape
        index = pd.MultiIndex.from_product([range(s)for s in shape], names=cols)
        df = pd.DataFrame({'score_matrix': score_matrix.flatten()}, index=index).reset_index()
        return df
    
    def Searchlight_score(self, n_jobs, n_splits, condition_mask, condition_mask1, y, y1):
        cv = KFold(n_splits = n_splits)
        nifti_masker = NiftiMasker(mask_strategy='template', memory="nilearn_cache",  memory_level=1)
        score = []
        for i in range(0, filename.shape[0]):
            start_time = time.time()
            mask_fmri = nifti_masker.fit(filename['file'].loc[i]).mask_img_
            searchlight = nilearn.decoding.SearchLight(mask_fmri, n_jobs=n_jobs, verbose=1, cv=cv)
            if (nib.load(filename['file'].loc[i]).shape[3] == 366):
                fmri_img = index_img(filename['file'].loc[i], condition_mask1)
                searchlight.fit(fmri_img, y1)
            else:
                fmri_img = index_img(filename['file'].loc[i], condition_mask)
                searchlight.fit(fmri_img, y)
            
        score.append(searchlight.scores_)
        return score
        
def label_condition(con1,con2):
    shape = np.repeat('shapes', 21)
    face = np.repeat('faces', 21)
    label = np.repeat('rest', 332)
    designS = [0, 71, 100, 171, 200]
    designF = [21, 50, 121, 150, 221]
    for i in designS:
        label[i:i+21] = shape
    for j in designF:
        label[j:j+21] = face
    labels = pd.DataFrame(label, columns = ['labels'])
    y = labels['labels']
    #Restrict to shapes and face
    #condition_mask = y.isin(['shap', 'face'])
    #condition_mask = y.isin(['rest', 'face'])
    condition_mask = y.isin([con1, con2])
    y = y[condition_mask]
    y.reset_index(drop = True, inplace = True)
    
    label1 = np.repeat('rest', 366)
    for i in designS:
        label1[i:i+21] = shape 
    for j in designF:
        label1[j:j+21] = face
    labels1 = pd.DataFrame(label1, columns = ['labels'])
    y1 = labels1['labels']
    #Restrict to shapes and face
    #condition_mask1 = y1.isin(['shap', 'face'])
    #condition_mask1 = y1.isin(['rest', 'face'])
    condition_mask1 = y1.isin([con1, con2])
    y1 = y1[condition_mask1]
    y1.reset_index(drop = True, inplace = True)
    return condition_mask, y, condition_mask1, y1
    
condition_mask, y0, condition_mask1, y1 = label_condition('shap', 'face')

def using_multiindex(A, columns):
    shape = A.shape
    index = pd.MultiIndex.from_product([range(s)for s in shape], names=columns)
    df = pd.DataFrame({'A': A.flatten()}, index=index).reset_index()
    return df

def reshape_fmri(fmri):
    n_samples, n_x, n_y = fmri.shape
    return fmri.reshape((n_samples,n_x*n_y))

def tfMRI_searchlight_raw(n_jobs, n_splits, tfmri_filename, mask_int, C = 0.1):
    cv = KFold(n_splits = n_splits)
    #from sklearn.ensemble import RandomForestClassifier
    model =  LinearSVC(dual = False, max_iter = 10000, C = C)
    tfmri_masked = []
    for i in range(0, tfmri_filename.shape[0]):
        start_time = time.time()
        mask_fmri = mask_int
        searchlight = nilearn.decoding.SearchLight(mask_fmri, n_jobs=n_jobs, verbose=1, cv=cv, estimator = model)
        if (nib.load(tfmri_filename[i]).shape[3] == 366):
            fmri_img = index_img(tfmri_filename[i], condition_mask1)
            searchlight.fit(fmri_img, y1)
        else:
            fmri_img = index_img(tfmri_filename[i], condition_mask)
            searchlight.fit(fmri_img, y)
        score = searchlight.scores_
        df = using_multiindex(score, list('XYZ'))
        dff = df.loc[dff['A'] > 0.5 | dff['A'] == 'nan']
        dff.reset_index(drop = True, inplace = True)
        score_binary = np.zeros_like(score)
        for j in range(dff_sorted.shape[0]):
            score_binary[dff_sorted['X'][j]][dff_sorted['Y'][j]][dff_sorted['Z'][j]] = 1
        score_mask =  new_img_like(mask_fmri, score_binary)
        masker = NiftiMasker(mask_strategy='template', mask_img = score_mask, memory="nilearn_cache", memory_level=1)
        tfmri_masked.append(masker.fit_transform(fmri_img))
        print(i)
        print(tfmri_masked[i].shape)
        print(time.time() - start_time)
    return score_mask, tfmri_masked

m = tfMRI_searchlight_raw(n_jobs = 10, n_splits = 4, tfmri_filename = x_inner_train[0:25], mask_int = mask_int, C = 0.1)

###############################################################################################################################################
filename = pd.read_csv('/links/groups/borgwardt/Projects/ZhiYe_MasterThesis/MD_HC_tfMRI.csv', dtype = str)
y = np.repeat([1, 0], 234).ravel()
outer_cv = StratifiedKFold(n_splits=5, shuffle = True, random_state = 12)
inner_cv = StratifiedKFold(n_splits=5, shuffle = True, random_state = 12)
j = 0
train, test = list(outer_cv.split(filename, y))[j]
x_train, x_test = np.array(filename['file'].loc[train]), np.array(filename['file'].loc[test])
y_train, y_test = y[train], y[test]
h = 1
inner_train, inner_test = list(inner_cv.split(x_train, y_train))[h]
x_inner_train, x_inner_test = x_train[inner_train], x_train[inner_test]
y_inner_train, y_inner_test = y_train[inner_train], y_train[inner_test]
##############################################################################################################################################

mask_fmri = nifti_masker.fit(filename['file'].loc[9]).mask_img_
template = nib.load(filename['file'].loc[9])
def tfMRI_searchlight(n_jobs, n_splits, tfmri_filename, mask_int, C, template, y, y1, condition_mask, condition_mask1):
    cv = KFold(n_splits = n_splits)
    #from sklearn.ensemble import RandomForestClassifier
    model =  LinearSVC(dual = False, max_iter = 10000, C = C)
    tfmri_masked = []
    score_mask = []
    for i in range(0, tfmri_filename.shape[0]):
        start_time = time.time()
        mask_fmri = mask_int
        searchlight = nilearn.decoding.SearchLight(mask_fmri, n_jobs=n_jobs, verbose=1, cv=cv, estimator = model)
        re = resample_to_img(tfmri_filename[i], template)
        if (re.shape[3] == 366):
            fmri_img = index_img(re, condition_mask1)
            searchlight.fit(fmri_img, y1)
        else:
            fmri_img = index_img(re, condition_mask)
            searchlight.fit(fmri_img, y0)
        score = searchlight.scores_
        df = using_multiindex(score, list('XYZ'))
        dff = df.loc[df['A'] > 0.5]
        dff.reset_index(drop = True, inplace = True)
        score_binary = np.zeros_like(score)
        for k in range(dff.shape[0]):
            score_binary[dff['X'][k]][dff['Y'][k]][dff['Z'][k]] = 1
        score_mask.append(new_img_like(mask_fmri, score_binary))
        print(i)
        print(time.time() - start_time)
    return score_mask
    
start_time1 = time.time()
s = tfMRI_searchlight(n_jobs = 10, n_splits = 4, tfmri_filename = x_inner_train, mask_int = mask_int, C = 0.1, template = template, y = y0, y1 = y1, condition_mask = condition_mask, condition_mask1 = condition_mask1)
print(time.time() - start_time1)

mask_inter_85 = intersect_masks(s, threshold = 0.85)

#############################################################store

mask_int = nib.load("/links/groups/borgwardt/Projects/ZhiYe_MasterThesis/tfMRI468_mask_inter.nii.gz")
template = nib.load(filename['file'].loc[9])
condition_mask, y0, condition_mask1, y1 = label_condition('shap', 'face')
cv = KFold(n_splits = 4)
#from sklearn.ensemble import RandomForestClassifier
model =  LinearSVC(dual = False, max_iter = 10000, C = 0.1)
model1 =  LinearSVC(dual = False, max_iter = 10000, C = 1)
tfmri_masked = []
score_mask = []

mask_fmri = mask_int
searchlight = nilearn.decoding.SearchLight(mask_fmri, n_jobs = 10, verbose=1, cv=cv, estimator = model)

i = 5
start_time = time.time()
re = resample_to_img(x_test[i], template)
if (re.shape[3] == 366):
    fmri_img = index_img(re, condition_mask1)
    searchlight.fit(fmri_img, y1)
else:
    fmri_img = index_img(re, condition_mask)
    searchlight.fit(fmri_img, y0)

score = searchlight.scores_
df = using_multiindex(score, list('XYZ'))
dff = df.loc[df['A'] > 0.5]
dff.reset_index(drop = True, inplace = True)
score_binary = np.zeros_like(score)
for k in range(dff.shape[0]):
    score_binary[dff['X'][k]][dff['Y'][k]][dff['Z'][k]] = 1

nib.save(new_img_like(mask_fmri, score_binary), "/links/groups/borgwardt/Projects/ZhiYe_MasterThesis/Searchlight_SF_05score/%s_score.nii.gz" % (x_test[i][2:9]))
print(sum(sum(sum(score_binary))))
print(i)
print(time.time() - start_time)

for i in range(6, x_test.shape[0]):
    start_time = time.time()
    re = resample_to_img(x_test[i], template)
    if (re.shape[3] == 366):
        fmri_img = index_img(re, condition_mask1)
        searchlight.fit(fmri_img, y1)
    else:
        fmri_img = index_img(re, condition_mask)
        searchlight.fit(fmri_img, y0)
    score = searchlight.scores_
    df = using_multiindex(score, list('XYZ'))
    dff = df.loc[df['A'] > 0.5]
    dff.reset_index(drop = True, inplace = True)
    score_binary = np.zeros_like(score)
    for k in range(dff.shape[0]):
        score_binary[dff['X'][k]][dff['Y'][k]][dff['Z'][k]] = 1
    nib.save(new_img_like(mask_fmri, score_binary), "/links/groups/borgwardt/Projects/ZhiYe_MasterThesis/Searchlight_SF_05score/%s_score.nii.gz" % (x_test[i][2:9]))
    print(np.unique(score_binary, return_counts = True))
    print(i)
    print(time.time() - start_time)

for i in range(0, x_inner_train.shape[0]):
    nib.save(s[i], "/links/groups/borgwardt/Projects/ZhiYe_MasterThesis/Searchlight_SF_05score/%s_score.nii.gz" % (x_inner_train[i][2:9]))
    print(i)

score_map = []
for i in range(0, x_inner_train.shape[0]):
    score_map.append(nib.load("/links/groups/borgwardt/Projects/ZhiYe_MasterThesis/Searchlight_SF_05score/%s_score.nii.gz" % (x_inner_train[i][2:9])))
    print(i)

score_int = intersect_masks(score_map, threshold = 0)
new_masker = NiftiMasker(mask_img = score_int,  memory="nilearn_cache", memory_level=1)
tf_train_masked = []
for i in range(0, x_inner_train.shape[0]):
    start_time = time.time()
    re = resample_to_img(x_inner_train[i], template)
    if (re.shape[3] == 366):
        fmri_img = index_img(re, condition_mask1)
    else:
        fmri_img = index_img(re, condition_mask)
    tf_train_masked.append(new_masker.fit_transform(fmri_img))
    print(i)
    print(tf_train_masked[i].shape)
    print(time.time() - start_time)

model =  LinearSVC(dual = False, max_iter = 10000, C = 0.1)

start_time = time.time()
model1.fit(X, y_inner_train)
print(time.time() - start_time)

tf_test_masked = []
for i in range(0, x_inner_test.shape[0]):
    start_time = time.time()
    re = resample_to_img(x_inner_test[i], template)
    if (re.shape[3] == 366):
        fmri_img = index_img(re, condition_mask1)
    else:
        fmri_img = index_img(re, condition_mask)
    tf_test_masked.append(new_masker.fit_transform(fmri_img))
    print(i)
    print(tf_test_masked[i].shape)
    print(time.time() - start_time)
    
start_time = time.time()
y_inner1_pred = model1.predict(Y)
print(time.time() - start_time)

metrics.accuracy_score(y_inner_test, y_inner_pred)
metrics.f1_score(y_inner_test, y_inner_pred)

metrics.accuracy_score(y_inner_test, y_inner1_pred)
metrics.f1_score(y_inner_test, y_inner1_pred)

plotting.plot_roi(score_int, output_file = '/links/groups/borgwardt/Projects/ZhiYe_MasterThesis/plot_data/score_map02.png')
